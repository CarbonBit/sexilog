input {
	udp {
		codec => json {charset => "CP1252"}
		port => 1514
		tags => [vcenter]
		type => nxlog
	}
}

filter {
	    if "vcenter" in [tags] and [type] == "nxlog"{
			grok {
				break_on_match => true
				match => [
					"message", "%{TIMESTAMP_ISO8601:@timestamp} (?<message_body>\[%{NUMBER:vpxd_id} %{DATA:vpxd_severity} \'%{DATA:vpxd_agent}\'.*\] \[(?<message_program>%{DATA:vpxd_task})\] %{GREEDYDATA:vpxd_message})",
					"message", "%{TIMESTAMP_ISO8601:@timestamp} (?<message_body>\[%{NUMBER:vpxd_id} %{DATA:vpxd_severity} \'(?<message_program>%{DATA:vpxd_agent})\'.*\] %{GREEDYDATA:vpxd_message})",
					"message", "(?<message_body>%{GREEDYDATA:message_debug})"
				]
			}
		

			if [filename] =~ /vpxd-profiler/ {
				grok {
					match => [
						"filename", "(?<message_program>(vpxd-profiler))"
					]
				}
			}

			if [message] =~ /\[Drm\]/ {
				grok {
					break_on_match => false
					match => [
						"message", ".*\[Drm\].*TOTAL[\s]cpu[\s]%{NUMBER:vpxd_drm_total_cpu}[\s]mem[\s]%{NUMBER:vpxd_drm_total_mem}"
					]
				}
			}

			if [message] =~ /ScoreboardStats/ {
				grok {
					break_on_match => false
					match => [
						"message", "ScoreboardStats.*total[\s]%{NUMBER:ScoreboardStats}"
					]
				}
			}

			if [message] =~ /VcServiceStats/ {
				grok {
					break_on_match => false
					match => [
						"message", "VcServiceStats.*/total[\s]%{NUMBER:VcServiceStats}",
						"message", "VcServiceStats.*/mean[\s]%{NUMBER:VcServiceStats}",
						"message", "VcServiceStats.*/max[\s]%{NUMBER:VcServiceStats}",
						"message", "VcServiceStats.*/min[\s]%{NUMBER:VcServiceStats}",
						"message", "VcServiceStats.*/numSamples[\s]%{NUMBER:VcServiceStats}"
					]
				}
			}

			if [message] =~ /OpMoLockStats/ {
				grok {
					break_on_match => false
					match => [
						#"message", "OpMoLockStats.*/total[\s]%{NUMBER:OpMoLockStats}",
						"message", "OpMoLockStats.*/mean[\s]%{NUMBER:OpMoLockStats}",
						#"message", "OpMoLockStats.*/max[\s]%{NUMBER:OpMoLockStats}",
						"message", "OpMoLockStats.*/min[\s]%{NUMBER:OpMoLockStats}"
						#"message", "OpMoLockStats.*/numSamples[\s]%{NUMBER:OpMoLockStats}"
					]
				}
			}

			if [message] =~ /HostStatus/ {
				grok {
					break_on_match => false
					match => [
						"message", "HostStatus.*(SpecGenNo|ChangeGenNo)[\s]%{NUMBER:HostStatus}",
						"message", "HostStatus.*IP[\s]%{GREEDYDATA}",
						"message", "HostStatus.*Name[\s]%{GREEDYDATA}"
					]
				}
			}

			if [message] =~ /ResPoolStats/ {
				grok {
					break_on_match => false
					match => [
						"message", "ResPoolStats.*(total|min|mean|max)[\s]%{NUMBER:ResPoolStats}"
					]
				}
			}

			if [message] =~ /OpMoLockStats/ {
				grok {
					break_on_match => false
					match => [
						"message", "OpMoLockStats.*total[\s]%{NUMBER:OpMoLockStats}"
					]
				}
			}
			
			if [message] =~ /peer/ {
				grok {
					break_on_match => false
					match => [
						"message", "peer=%{DATA:peer}"
					]
				}
			}
		}
}

output {
	elasticsearch { host => localhost protocol => "http" }
}